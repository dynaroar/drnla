#!/usr/bin/perl

use strict;
use warnings;
use Data::Dumper;
use lib '.';
my @tools = qw/ddr t2 function/;
use Parsers qw{parse find_benchmarks};

################### Arguments
my $COMPARISON = 0; my $ITERS = 1; my $PROVETNT = 0; my $SAVETEX = 0;
my $usage = "usage: ./harvest [options] (csvs|nocsvs) <benchdir>/<tmpdir>\n".
    "  where options are: --iters=5 --compare=1 --integrated=1 --tools=t2,function,ddr\n";
die $usage unless $#ARGV >= 1;
while ($ARGV[0] =~ /^--(.*)=(.+)$/) {
    my ($k,$v) = ($1,$2);
    shift @ARGV;
    @tools = split ",", $v if $k eq 'tools';
    $COMPARISON = 1 if $k eq 'compare';
    $ITERS = $v if $k eq 'iters';
    $PROVETNT = 1 if $k eq 'integrated'
}
my ($csvs,$a3) = @ARGV;
my ($bdir,$outdir) = split '/', $a3 or die $!;

#########################################################

print "*\n";
print "* Benchmarking -- Harvest Results\n";
print "*\n";
print "* Paper: DDR for CTL\n";
print "* Authors: (omitted for blind)\n";
print "*\n";
print "* Configuration:\n";

my @bnames = ();
my ($benchdir,$benchesref,$b2expected) = Parsers::find_benchmarks($bdir,\@bnames);
my @benches = @{$benchesref};
print "*\n\n";

################### Filename for results
use POSIX qw(strftime);
my $now = time();
my $fn = strftime('%Y%m%d%H%M%S', gmtime($now));

my @integrated;
my @integratedHtml;
my @integratedC;
my @integratedCHtml;
my @dynDetail;
my @dynHtml;
my @skips;
################### Harvesting the results


my @newfile;
my $compare;

foreach my $tool (@tools) {
  foreach my $b (sort @benches) {
      mkdir("../results/$b") if (not (-e "../results/$b"));
      my $logfn = "$benchdir/$outdir/$tool-$b.log.1"; 
      #warn $logfn;
      #die "could not find: $logfn" unless -f $logfn;
      if (not (-e $logfn)) { push @skips, $logfn; next; }
      my $tmpb = $b; #$tmpb =~ s/-both-n?t.c//;
      # Step 1: General parsing that all tools/variants support
      #$compare->{$tmpb}->{$tool} = 
      my $d = Parsers::parse($tool,$logfn,$ITERS);
      my $bb = $tmpb; 
      $compare->{$bb}->{$tool}->{detail} = $d if $tool eq 'ddr';
      if($tmpb =~ /\_lia/) {
        next if $tool eq 'ddr';
        my $t = $bb; $t =~ s/_lia//;
        $compare->{$t}->{$tool}->{liatime} = $d->{time};
        $compare->{$t}->{$tool}->{liaresult} = $d->{result};
      } else {
        $compare->{$bb}->{$tool}->{nlatime} = $d->{time};
        $compare->{$bb}->{$tool}->{nlaresult} = $d->{result};
      }
      #print Dumper($compare);
      #die if $b =~ /ps2-nla-valid/;
  }
}


#
# Generate LaTeX for DDR
#
sub touchupName {
  my ($b) = @_;
  my $o = "\\ttt{$b}";  $o =~ s/-nla-/-/; $o =~ s/-valid/-T/; $o =~ s/-invalid/-F/; 
  return $o;
}
if($#tools == 0 && $tools[0] eq 'ddr') {
  #print OUT "BENCH           RESULT  TIME   STAGES\n";
  my $dname = $benchdir; $dname =~ s{^.*/}{}g;
  my $outfn = "$benchdir/$outdir/ddr-$dname.tex";
  open OUT, ">$outfn" or die "$outfn - $!";
  foreach my $b (sort keys %$compare) {
    next if $b =~ /_lia/;
    print "did ps2:\n".Dumper($compare->{$b}) if $b =~ /ps2-nla-valid/;
    my $exp = '\rTRUE'; $exp = '\rFALSE' if $b =~ /invalid/;
    my $renderedBname = touchupName($b);
    printf OUT "%-15s & %-8s & %-8s & %s & %s \\\\\n", $renderedBname, 
      $compare->{$b}->{ddr}->{detail}->{result},
      $compare->{$b}->{ddr}->{detail}->{time},
      $compare->{$b}->{ddr}->{detail}->{stages},
      $compare->{$b}->{ddr}->{detail}->{summary};
  }
#  print Dumper($compare);
  close OUT;
  print "wrote:  $outfn\n";
  print qx{cp $outfn results/};
  print "  and copied to results\n";
  exit;
}


#
# Generate LaTeX for how DDR Improves CTL
#
sub checkResult {
  my ($res,$exp) = @_;
  return '\unsound{\rTRUE}' if $exp eq '\rFALSE' && $res eq '\rTRUE';
  return '\unsound{\rFALSE}' if $exp eq '\rTRUE' && $res eq '\rFALSE';
  return $res;
}
sub checkImprove {
  my ($lia,$nla,$exp) = @_;
  return '\hlg '.$lia if $lia eq '\rTRUE' && $exp eq '\rTRUE' && $nla ne '\rTRUE';
  return '\hlg '.$lia if $lia eq '\rFALSE' && $exp eq '\rFALSE'  && $nla ne '\rFALSE';
  return $lia;
}
my $bn = $benchdir; $bn =~ s/^.*\///g;
my $ts = join '-', @tools;
my $outfn = "$benchdir/$outdir/improvements-$bn-$ts.tex";
open OUT, ">$outfn" or die $!;
print OUT "%RESULTS:\n% Benchmark & Exp. & ".
   join(" & ", map("$_ Res & $_ Time & $_ Summary",@tools))."\\\\\n";
foreach my $b (sort keys %$compare) {
  my $exp = '\rTRUE'; $exp = '\rFALSE' if $b =~ /invalid/;
  my $renderedBname = touchupName($b);
  printf OUT "%-15s & %-8s ", $renderedBname, $exp;
  foreach my $tool (@tools) {
    # if (not defined $compare->{$b}->{$tool}->{liaresult}) {
    #   warn "missing LIA results for $tool on $b, benchmark set $bn, benchmark: $b\n";
    #   die Dumper($compare->{$b}->{$tool});
    #   $compare->{$b}->{$tool}->{liaresult} = 'NA';
    #   $compare->{$b}->{$tool}->{liatime} = 'NA';
    # }
    #print "$b - $tool:".Dumper($compare->{$b}->{$tool});
    $compare->{$b}->{$tool}->{liaresult} = checkResult($compare->{$b}->{$tool}->{liaresult},$exp);
    $compare->{$b}->{$tool}->{nlaresult} = checkResult($compare->{$b}->{$tool}->{nlaresult},$exp);
    $compare->{$b}->{$tool}->{liaresult} = checkImprove($compare->{$b}->{$tool}->{liaresult},$compare->{$b}->{$tool}->{nlaresult},$exp);
    #print $tool." ".$b." ".Dumper($compare->{$b}->{$tool}) if not defined $compare->{$b}->{$tool}->{liaresult};
    #my $liaeek = ( $compare->{$b}->{$tool}->{liaresult} eq $exp ? '{' : '\red{');
    #my $nlaeek = ( $compare->{$b}->{$tool}->{nlaresult} eq $exp ? '{' : '\red{');
    printf OUT "& "."%-8s & %-8s & "."%-8s & %-8s ",
    $compare->{$b}->{$tool}->{nlaresult},
    $compare->{$b}->{$tool}->{nlatime} ,
    $compare->{$b}->{$tool}->{liaresult},
    $compare->{$b}->{$tool}->{liatime};
  }
  print OUT " \\\\\n";
}
close OUT;
print "wrote: $outfn\n";
print "  and copied it to results/\n";
print qx{cp $outfn results/};