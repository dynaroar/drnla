#!/usr/bin/perl

#use local::lib;
my $USERHOME = $ENV{HOME};
my $USERREPO = "$USERHOME/dynamiteLTL";
my $TOOLSDIR = '/tools';

$ENV{"CONDA_HOME"} = "/tools/miniconda3/bin/python3";
$ENV{"DIG_HOME"} ="/tools/dig/src/dig.py";

###############################################################
use strict;
use warnings;
use File::Temp qw(tempfile tempdir);
use Time::Out qw(timeout) ;
use Time::HiRes qw(gettimeofday tv_interval);

my $ITERS = 1;
my $TIMEOUT  = 300;
my $INTEGRATED = 0;
my @timedout;
my $pid = getppid();
my $PROPERTY = 'ctl';
my $HARVEST = 0;
my $TMPFILE = "/tmp/dynamo.$pid.txt";
my $KILLJAVAZ3 = "killall java; killall z3;";
my $HARD_TIMEOUT = 0; # hard force timeout
###############################################################
sub specfile {
    return qq{$USERREPO/benchmarks/termination.prp} if $_[0] eq 'termination';
    return qq{$USERREPO/benchmarks/nontermination.prp} if $_[0] eq 'nontermination';
    die "specfile - $_[0]";
}
###############################################################
use lib '.';
use Parsers qw{ult ultreach dynamo dynamiteltl t2};

sub getFuncTionArgs {
    my ($fn) = @_;
    open ARGS, $fn or die "$fn - $!";
    while(<ARGS>) {
        if($_ =~ m{// ARGS: (.*)$}) { return $1; }
    }
    die "could not find args for $fn";
}
sub getCTLprop {
    my ($benchmarkFn,$tool) = @_;
    my $propfn = $benchmarkFn;
    if ($propfn =~ m{/ctl-nla1/} || $propfn =~ m{ctl-pldi13} || $propfn =~ m{ctl-pldi13small-nla-rest}) {
      $propfn =~ s/-(in)?valid\.c/.prop/;
      $propfn =~ s/-(in)?valid_.*\.c/.prop/;
    } elsif ($propfn =~ m{/ctl/}) {
        $propfn =~ s{\/[^\/]*\.c}{/bresenham1.prop};
        $propfn =~ s{\/[a-z]+\d?\.prp}{/bresenham1.prop};
    } else {
        die "don't know how to find prop file for $propfn";
    }
    die "can't find propfile $propfn" unless -e $propfn;

    open T, $propfn or die "couldn't find property file $propfn - $!";
    while(<T>) {
        chomp;
        my ($t,$p) = split /: ?/, $_;
        die "Prop file $propfn does not have an entry for $t.\n   $_\n"
           unless defined $p;
        return $p if $t eq $tool;
    }
    die "could not find prp for $propfn - $tool\n";
}

sub appendTime {
    my ($fn,$t) = @_;
    print qx{echo "\nEJKTIME:$t\n" >> $fn};
}
my $t0;
my $CFG = {
    t2 => {
        DIR => qq{/tools/T2},
        CMD => sub { 
            my $prp = getCTLprop($_[0],'t2');
            $_[0] =~ s/\.c/.t2/;
            return qq(mono src/bin/Debug/T2.exe -input_t2 $_[0] -CTL "$prp" 2>&1 > /tmp/t2.log); },
        FETCH => sub { return qq(cp /tmp/t2.log $_[0]); },
        PARSE => sub { return Parsers::t2($_[0]); },
    },
    ddr => {
        # ./dynamltl.py -i ../benchmarks/ctl/ps2-nla-valid.c --prop 'termination' --refine 8
        DIR => qq{$USERREPO/src},
        CMD => sub {
            my $bnd = ($_[0] =~ /pldi13small/ ? '--lbnd 600' : '');
            return qq(rm /tmp/ddr.log; timeout ${TIMEOUT}s ./dynamltl.py -timeout $TIMEOUT -i $_[0] --prop 'termination' --refine 8 $bnd 2>&1 | tee /tmp/ddr.log);
        },
        FETCH => sub { return qq(cp /tmp/ddr.log $_[0]); },
        PARSE => sub { return Parsers::ddr($_[0]); },
    },
    function => {
        DIR => qq{/tools/function},
        CMD => sub { 
            # does the file exist?
            $_[0] =~ s/\.c/_fn.c/;
            return qq(echo "not found" > /tmp/function.log) unless -e $_[0];
            my $prp = getCTLprop($_[0],'function');
            my $args = getFuncTionArgs($_[0]);
            return qq(./function $_[0] -ctl "$prp" $args 2>&1 > /tmp/function.log); },
        FETCH => sub { return qq(cp /tmp/function.log $_[0]); },
        PARSE => sub { return Parsers::function($_[0]); },
    },
    ultimate => {
        DIR    => qq{$USERREPO/bin},
#        CMD    => sub { return qq($KILL timeout ${TIMEOUT}s ./Ultimate.py --file $_[0]  --spec $SPECFILE --architecture 32bit); },
        CMD => sub { return qq(./ultimate-ltl-nla $_[0] 2>&1 > Ultimate.log); },
        FETCH  => sub { return qq(cp Ultimate.log $_[0]); },
        PARSE  => sub { return Parsers::ult($_[0]); },
    },
    ultimatereach => {
        DIR    => qq{$USERREPO/bin},
#        CMD    => sub { return qq($KILL timeout ${TIMEOUT}s ./Ultimate.py --file $_[0]  --spec $SPECFILE --architecture 32bit); },
        CMD => sub { return qq(./ultimate-reach-lin $_[0] 2>&1 > Ultimate.log); },
        FETCH  => sub { return qq(cp Ultimate.log $_[0]); },
        PARSE  => sub { return Parsers::ultreach($_[0]); },
    },
    aprove => {
        DIR    => qq{$TOOLSDIR/aprove},
        CMD    => sub { return qq(./AProVE.sh $_[0] > aprove.log); },
        FETCH  => sub { return qq(cp aprove.log $_[0]); },
        PARSE  => sub { return Parsers::aprove($_[0]); }
    },
    seahorn => {
        DIR    => qq{$TOOLSDIR/seahorn/build/run/bin},
        CMD    => sub { my $specf = specfile('termination');
                        return qq($TOOLSDIR/seahorn/build/run/bin/sea_svcomp --cpu=10 --cex=error-witness.graphml -m64 --spec=$specf $_[0] > /tmp/seahorn.log); },
        FETCH  => sub { return qq(mv /tmp/seahorn.log $_[0]); },
        PARSE  => sub { return Parsers::seahorn($_[0]); }
    }
};
    
###############################################################
#### Utilities
sub runc { my ($cmd) = @_; print "+ $cmd\n(with timeout of $TIMEOUT s)\n";
	   if ($HARD_TIMEOUT == 1) {
	       timeout $TIMEOUT => sub { print qx{$cmd}; };
	       if ($@) {  push @timedout, $cmd; }
	   } else {
	       print qx{$cmd};
	   }
}	   

###############################################################
#### Arguments parsing
die "usage: ./run (options) <subdir> (list|run) [dynamiteltl,dynamo,ultimate,seahorn,aprove,t2,function] (geo1-both-t,cohencu2-both-t,...)\n".
    "  (last argument is optional) \n".
    "  options:\n".
    "    --prop=(t|nt|ltl|ctl) # default is \"ctl\" for CTL\n".
    "    --iters=1\n".
    "    --harvest=true    # after benchmarks are run, harvest results\n".
    "    --integrated=1    # for integrated\n".
    "    --hardtimeout=1   # hard force timeout\n".
    "    --timeout=900\n" unless $#ARGV >= 1;
while ($ARGV[0] =~ /^--(.*)=(.+)$/) {
    my ($k,$v) = ($1,$2);
    shift @ARGV;
    $TIMEOUT = $v if $k eq 'timeout';
    $INTEGRATED = 1 if $k eq 'integrated';
    $HARD_TIMEOUT = 1 if $k eq 'hardtimeout';
    $HARVEST = 1 if $k eq 'harvest';
    $PROPERTY = 'termination'    if $k eq 'prop' && $v =~ /^t/;
    $PROPERTY = 'nontermination' if $k eq 'prop' && $v =~ /^non/;
    $PROPERTY = 'ltl'            if $k eq 'prop' && $v =~ /^ltl/;
    $PROPERTY = 'ctl'            if $k eq 'prop' && $v =~ /^ctl/;
    $ITERS = $v if $k eq 'iters';
}
my @bnames = ();
my ($bdir,$arg1,$ts,$bms) = @ARGV;
my @tools = split ',', $ts;
@bnames = split ',', $bms if defined $bms;
use Data::Dumper;
print "*\n";
print "* Benchmarking\n";
print "*\n";
print "* Paper: Dynamic LTL\n";
print "* Authors: (omitted for blind)\n";
print "*\n";
print "* Configuration:\n";
print "    Filter to   : ".join(' ',@bnames)."\n" if $#bnames >= 0;
print "    Tools       : $ts\n";

use Parsers qw/find_benchmarks/;
my ($benchdir,$benchesref,$b2expected) = Parsers::find_benchmarks($bdir,\@bnames);
my @benches = sort @{$benchesref}; # [50..158];
print "    Total files : ".($#benches+1)."\n";

# Render Table of properties:
my $dname = $benchdir; $dname =~ s{^.*/}{}g;
open OUT, ">results/benchmarks-$dname.tex" or die "$dname - $!";
foreach my $b (@benches) {
    next if $b =~ /_lia/;
    my $prop = Parsers::ctlT2ToTex(getCTLprop("$benchdir/$b",'t2'));
    printf OUT "%-25s & \$%s\$ \\\\\n", $b, $prop;
}
close OUT;
print "wrote list of benchmarks to: results/benchmarks-$dname.tex\n";
exit if ($arg1 eq 'list');

chdir $benchdir;

################### Running the benchmarks
if ($arg1 eq 'run') {
    my $tmpl = ($INTEGRATED == 1 ? "integrated-XXXXXXX" : "out-XXXXXXX");
    my $t = File::Temp->newdir( $tmpl, CLEANUP => 0 );
    my $outdir = $t->dirname;
    print "*   Saving logs to: $benchdir/$outdir\n";
    open TMP, ">/tmp/dynamite.outdir2" or die $!;
    print TMP $outdir;
    close TMP;
    print "*\n*\n";
    my $ct = 0;
    my $tot = 1 * @tools * @benches;
    foreach my $tool (@tools) {
        my %b2res;
        foreach my $b (@benches) {
            next if $b =~ /lia/ && $tool =~ /dyn/;
            ++$ct;
            print "\n* --- Now executing [$tool] on benchmark: [$b] [$ct of $tot]---\n";
            for my $iter (1..$ITERS) {
                chdir $CFG->{$tool}->{DIR} or die "can't CHDIR to $CFG->{$tool}->{DIR}: $!";
                #my $SPECFILE = ($b =~ m/-nt\./ ? $NT_SPECFILE : $T_SPECFILE);
                my $t0 = [gettimeofday];
                runc( $CFG->{$tool}->{CMD}->("$benchdir/$b") );
                my $logfn = "$benchdir/$outdir/$tool-$b.log.$iter";
                runc( $CFG->{$tool}->{FETCH}->($logfn) );
                my $elapsed = tv_interval($t0);
                print "appending: $elapsed to $logfn\n";
                appendTime($logfn,$elapsed);
                #$b2res{$b} = $CFG->{$tool}->{PARSE}->($logfn);
                #print "$logfn - Time:$b2res{$b}->{time} - Result:$b2res{$b}->{result}\n";
            }
        }
    }
    my $ts = join ',', @tools;
    my $hcmd = qq(./harvest --iters=1 --tools=$ts nocsvs $bdir/$outdir);
    print "*\n* you may now harvest the results:\n $hcmd\n*\n";
    open HARV, ">>$USERREPO/benchmarks/harvest-howto.sh" or die $!;
    print HARV "$hcmd\n";
    close HARV;
    print "Timedout:  \n".join("\n   ",@timedout)."\n" if $#timedout >= 0;
    if ($HARVEST == 1 ){
        chdir "$USERREPO/benchmarks";
        print qx($hcmd);
    }
}

